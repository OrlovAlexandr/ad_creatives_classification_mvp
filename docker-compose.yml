version: '3.8'

services:
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"  # API порт
      - "9001:9001"  # Console порт
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
      - ./minio_init:/minio_init
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  minio_init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_BUCKET: ${MINIO_BUCKET:-creatives}
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 $${MINIO_ACCESS_KEY} $${MINIO_SECRET_KEY};
      mc mb myminio/$${MINIO_BUCKET} --ignore-existing;
      mc anonymous set public myminio/$${MINIO_BUCKET};
      echo 'MinIO initialization completed successfully';
      "
  db:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7
    env_file:
      - .env
    ports:
      - "6379:6379"
    restart: unless-stopped

  backend:
    build: ./backend
    env_file:
      - .env
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_SECURE: ${MINIO_SECURE:-false}
      MINIO_BUCKET: ${MINIO_BUCKET:-creatives}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_healthy 
    volumes:
      - uploads:/app/uploads
    restart: unless-stopped

  celery_worker:
    build: ./backend
    env_file:
      - .env
    command: celery -A tasks worker -l info
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MINIO_SECURE: ${MINIO_SECURE:-false}
      MINIO_BUCKET: ${MINIO_BUCKET:-creatives}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      backend:
        condition: service_started
      minio:
        condition: service_healthy
    volumes:
      - uploads:/app/uploads:shared
    restart: unless-stopped

  frontend:
    build: ./frontend
    env_file:
      - .env
    ports:
      - "8501:8501"
    depends_on:
      - backend
    environment:
      BACKEND_URL: ${BACKEND_URL}
    volumes:
      - ./dataset:/app/dataset
      - uploads:/app/uploads
    restart: unless-stopped

volumes:
  postgres_data:
  uploads:
  minio_data: